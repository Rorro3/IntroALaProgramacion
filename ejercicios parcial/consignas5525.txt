problema hayQueCodificar (c: Char, mapeo: seq<Char x Char>) : Bool {
    requiere: {No hay elementos repetidos entre las primeras componentes de mapeo}
    requiere: {No hay elementos repetidos entre las segundas componentes de mapeo}
    asegura: {res = true <=> c es igual a la primera componente de alguna tupla de mapeo}
}


problema cuantasVecesHayQueCodificar (c: Char, frase: seq<Char>, mapeo: seq<Char x Char>) : Z {
    requiere: {No hay elementos repetidos entre las primeras componentes de mapeo}
    requiere: {No hay elementos repetidos entre las segundas componentes de mapeo}
    requiere: {|frase| > 0}
    requiere: {c pertenece a frase}
    asegura: {(res = 0 y hayQueCodificar (c, mapeo) = false) o (res = cantidad de veces que aparece c en frase y hayQueCodificar (c, mapeo) = true)}
}


problema laQueMasHayQueCodificar (frase: seq<Char>, mapeo: seq<Char x Char>) : Char {
    requiere: {No hay elementos repetidos entre las primeras componentes de mapeo}
    requiere: {No hay elementos repetidos entre las segundas componentes de mapeo}
    requiere: {|frase| > 0}
    requiere: {Existe al menos un c que pertenece a frase y hayQueCodificar(c, mapeo) = true}
    asegura: {res = c donde c es el caracter tal que cuantasVecesHayQueCodificar(c, frase, mapeo) es mayor a cualquier otro caracter perteneciente a frase}
    asegura: {Si existen mas de un caracter que cumple la condicion anterior, devuelve el que aparece primero en frase}
}